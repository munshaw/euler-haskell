\documentclass[b5paper]{article}

\usepackage{../book/base}

\title{Even Fibonacci numbers}
\author{Brandon Munshaw}
\date{March 24, 2020}

\begin{document}

\maketitle

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

\begin{center}
$1, 2, 3, 5, 8, 13, 21, 34, 55, 89,\dots$
\end{center}

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

\section{Naive solution}

Since the limit is small, we can solve this directly. The Fibbonacci numbers take the form of the recurrence relation $f_0=0, f_1=1, f_n=f_{n-1}+f_{n-2}$. Here is a clever way to write this as an infinite list (it's a mind-bender but try working it out):

\begin{spec}
fibs = 0 : scanl (+) 1 fibs
\end{spec}

Now we filter out the even numbers, and find their sum:

\begin{spec}
sum . filter even $ takeWhile (<4*10^6) fibs
\end{spec}

This works well, but we can make this more concise and faster.

\section{Every third term}

If we list out the Fibonacci numbers, we can follow the parity laws and see they follow a pattern. Every third Fibonacci number is even!\\

\begin{tabular}{|r|l|}
\hline
$f_n$ & Parity\\
\hline
0  &               even\\
1  &               odd\\
1  & even + odd  = odd\\
2  & odd  + odd  = even\\
3  & odd  + even = odd\\
5  & even + odd  = odd\\
8  & odd  + odd  = even\\
13 & odd  + even = odd\\
21 & even + odd  = odd\\
34 & odd + odd   = even\\
\hline
\end{tabular}\\

Now use substitution to create a new recurrence relation for every third Fibonacci number.

\begin{align*}
f_n = f_{n-1} + f_{n-2}\\
= f_{n-2} + f_{n-3} + f_{n-2} = 2f_{n-2} + f_{n-3}\\
= 2f_{n-3} + 2f_{n-4} + f_{n-3} = 3f_{n-3} + 2f_{n-4}\\
= 3f_{n-3} + f_{n-4} + f_{n-5} + f_{n-6} = 4f_{n-3} + f_{n-6}\\
\implies e_n = 4e_{n-1} + e_{n-2}
\end{align*}

We can express our new recurrence relation $e_0=0,e_1=2,e_n = 4e_{n-1} + e_{n-2}$ as an infinite list using scanl.

\begin{code}
evenFibs :: [Int]
evenFibs = 0 : scanl (\a b -> 4*a+b) 2 evenFibs
\end{code}

Then we add all the terms under four million and print our result.

\begin{code}
main :: IO ()
main = print $ sum $ takeWhile (<4*10^6) evenFibs
\end{code}

\end{document}
